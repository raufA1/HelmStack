#!/bin/bash
# HelmStack Community Edition - Main CLI Entry Point
# Lightweight community version with basic features

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
HELMSTACK_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Version and basic info
HELMSTACK_VERSION="1.0.0-community"
HELMSTACK_EDITION="Community"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Disable colors if not in terminal
if [[ ! -t 1 ]]; then
    RED='' GREEN='' YELLOW='' BLUE='' PURPLE='' CYAN='' NC=''
fi

usage() {
    cat << EOF
${CYAN}üéØ HelmStack Community Edition${NC}
${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}
Open source project orchestration and workflow automation

${YELLOW}USAGE${NC}
    hs [COMMAND] [OPTIONS]

${YELLOW}COMMANDS${NC}
    ${GREEN}init${NC}         Initialize new project from template
    ${GREEN}template${NC}     Manage project templates
    ${GREEN}workflow${NC}     Run and manage workflows
    ${GREEN}status${NC}       Show project status and health
    ${GREEN}docs${NC}         Generate and manage documentation
    ${GREEN}metrics${NC}      Collect and display project metrics
    ${GREEN}config${NC}       Configuration management
    ${GREEN}version${NC}      Show version information
    ${GREEN}help${NC}         Show detailed help

${YELLOW}EXAMPLES${NC}
    hs init my-project              # Create new project
    hs template list                # List available templates
    hs workflow run basic-setup     # Run workflow
    hs status                       # Show project status
    hs docs generate                # Generate documentation

${YELLOW}QUICK START${NC}
    1. hs init my-project           # Create project
    2. cd my-project                # Enter project
    3. hs workflow run git-flow     # Set up Git
    4. hs docs generate             # Create docs

${PURPLE}Pro Edition Available${NC}
For AI-powered features, advanced integrations, and enterprise support:
https://helmstack.dev/pro

${CYAN}HelmStack Community v${HELMSTACK_VERSION}${NC}
EOF
}

# Command implementations
cmd_init() {
    local project_name="${1:-}"
    local template="${2:-basic}"

    if [[ -z "$project_name" ]]; then
        echo -e "${RED}‚ùå Project name required${NC}"
        echo "Usage: hs init <project-name> [template]"
        return 1
    fi

    echo -e "${CYAN}üéØ Initializing HelmStack project: ${project_name}${NC}"
    echo -e "${BLUE}Template: ${template}${NC}"

    # Create project directory
    if [[ -d "$project_name" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Directory already exists: ${project_name}${NC}"
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Cancelled"
            return 1
        fi
    fi

    mkdir -p "$project_name"
    cd "$project_name"

    # Copy template
    local template_dir="${HELMSTACK_ROOT}/templates/${template}"
    if [[ -d "$template_dir" ]]; then
        cp -r "$template_dir"/* .
        echo -e "${GREEN}‚úÖ Template copied: ${template}${NC}"
    else
        # Create basic structure
        mkdir -p {docs,src,tests,scripts}

        # Basic README
        cat > README.md << EOF
# ${project_name}

Project created with HelmStack Community Edition.

## Getting Started

\`\`\`bash
# Set up development environment
hs workflow run dev-setup

# Run tests
hs workflow run test

# Build project
hs workflow run build
\`\`\`

## Documentation

- [Project Status](docs/STATUS.md)
- [Workflows](docs/WORKFLOWS.md)
- [Contributing](docs/CONTRIBUTING.md)

## Commands

\`\`\`bash
hs status                    # Check project status
hs workflow list             # List available workflows
hs docs generate             # Generate documentation
\`\`\`

---

Generated by HelmStack Community Edition v${HELMSTACK_VERSION}
EOF

        # Basic gitignore
        cat > .gitignore << 'EOF'
# Dependencies
node_modules/
venv/
__pycache__/

# Build outputs
dist/
build/
*.egg-info/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# HelmStack
workspace/
.helmstack/
EOF

        echo -e "${GREEN}‚úÖ Basic project structure created${NC}"
    fi

    # Initialize git if not already
    if [[ ! -d ".git" ]]; then
        git init
        git add .
        git commit -m "Initial commit - HelmStack project setup"
        echo -e "${GREEN}‚úÖ Git repository initialized${NC}"
    fi

    echo -e "${CYAN}üéâ Project initialized successfully!${NC}"
    echo ""
    echo "Next steps:"
    echo "  cd ${project_name}"
    echo "  hs workflow list"
    echo "  hs status"
}

cmd_template() {
    local action="${1:-list}"

    case "$action" in
        list)
            echo -e "${CYAN}üìã Available Templates${NC}"
            echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"

            local template_dir="${HELMSTACK_ROOT}/templates"
            if [[ -d "$template_dir" ]]; then
                for template in "$template_dir"/*; do
                    if [[ -d "$template" ]]; then
                        local name=$(basename "$template")
                        local desc="Basic project template"

                        # Try to get description from template
                        if [[ -f "$template/template.yml" ]]; then
                            desc=$(grep "description:" "$template/template.yml" | cut -d':' -f2- | sed 's/^[[:space:]]*//' || echo "$desc")
                        fi

                        echo -e "  ${GREEN}${name}${NC} - ${desc}"
                    fi
                done
            else
                echo "  basic - Basic project structure"
                echo "  web-app - Web application template"
                echo "  api-service - REST API service template"
                echo "  library - Library/package template"
            fi
            ;;
        *)
            echo -e "${RED}‚ùå Unknown template action: ${action}${NC}"
            echo "Usage: hs template [list]"
            return 1
            ;;
    esac
}

cmd_workflow() {
    local action="${1:-list}"
    local workflow_name="${2:-}"

    case "$action" in
        list)
            echo -e "${CYAN}‚ö° Available Workflows${NC}"
            echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
            echo -e "  ${GREEN}basic-setup${NC}    - Initialize basic project structure"
            echo -e "  ${GREEN}git-flow${NC}       - Set up Git workflow with branches"
            echo -e "  ${GREEN}docs${NC}           - Generate project documentation"
            echo -e "  ${GREEN}test${NC}           - Run project tests"
            echo -e "  ${GREEN}build${NC}          - Build project artifacts"
            echo -e "  ${GREEN}deploy${NC}         - Deploy to staging/production"
            echo -e "  ${GREEN}cleanup${NC}        - Clean build artifacts and caches"
            ;;
        run)
            if [[ -z "$workflow_name" ]]; then
                echo -e "${RED}‚ùå Workflow name required${NC}"
                echo "Usage: hs workflow run <workflow-name>"
                return 1
            fi

            echo -e "${CYAN}‚ö° Running workflow: ${workflow_name}${NC}"

            case "$workflow_name" in
                basic-setup)
                    mkdir -p {docs,src,tests,scripts,workspace}
                    echo "# Project Status" > docs/STATUS.md
                    echo "# Workflows" > docs/WORKFLOWS.md
                    echo -e "${GREEN}‚úÖ Basic structure created${NC}"
                    ;;
                git-flow)
                    if git rev-parse --git-dir >/dev/null 2>&1; then
                        git checkout -b develop 2>/dev/null || true
                        git checkout main 2>/dev/null || git checkout master 2>/dev/null || true
                        echo -e "${GREEN}‚úÖ Git flow initialized${NC}"
                    else
                        echo -e "${YELLOW}‚ö†Ô∏è  Not a git repository${NC}"
                    fi
                    ;;
                docs)
                    cmd_docs generate
                    ;;
                test)
                    echo -e "${CYAN}üß™ Running tests...${NC}"
                    if [[ -f "package.json" ]]; then
                        npm test
                    elif [[ -f "requirements.txt" ]] || [[ -f "pyproject.toml" ]]; then
                        python -m pytest tests/ 2>/dev/null || echo "No tests found"
                    else
                        echo -e "${YELLOW}‚ö†Ô∏è  No test framework detected${NC}"
                    fi
                    ;;
                build)
                    echo -e "${CYAN}üî® Building project...${NC}"
                    if [[ -f "package.json" ]]; then
                        npm run build 2>/dev/null || echo "No build script found"
                    elif [[ -f "setup.py" ]] || [[ -f "pyproject.toml" ]]; then
                        python -m build 2>/dev/null || echo "No build configuration"
                    else
                        echo -e "${YELLOW}‚ö†Ô∏è  No build configuration detected${NC}"
                    fi
                    ;;
                cleanup)
                    echo -e "${CYAN}üßπ Cleaning up...${NC}"
                    rm -rf dist/ build/ *.egg-info/ node_modules/.cache/ .pytest_cache/
                    echo -e "${GREEN}‚úÖ Cleanup completed${NC}"
                    ;;
                *)
                    echo -e "${RED}‚ùå Unknown workflow: ${workflow_name}${NC}"
                    echo "Run 'hs workflow list' to see available workflows"
                    return 1
                    ;;
            esac
            ;;
        *)
            echo -e "${RED}‚ùå Unknown workflow action: ${action}${NC}"
            echo "Usage: hs workflow [list|run] [workflow-name]"
            return 1
            ;;
    esac
}

cmd_status() {
    echo -e "${CYAN}üìä Project Status${NC}"
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"

    # Project info
    echo -e "${YELLOW}Project:${NC} $(basename "$(pwd)")"
    echo -e "${YELLOW}Directory:${NC} $(pwd)"

    # Git status
    if git rev-parse --git-dir >/dev/null 2>&1; then
        local branch=$(git branch --show-current 2>/dev/null || echo "unknown")
        local commits=$(git log --oneline | wc -l 2>/dev/null || echo 0)
        local changes=$(git status --porcelain 2>/dev/null | wc -l || echo 0)

        echo -e "${YELLOW}Git:${NC} branch ${branch}, ${commits} commits, ${changes} changes"
    else
        echo -e "${YELLOW}Git:${NC} not a git repository"
    fi

    # File counts
    local total_files=$(find . -type f 2>/dev/null | wc -l || echo 0)
    local code_files=$(find . -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.sh" 2>/dev/null | wc -l || echo 0)
    local doc_files=$(find . -name "*.md" 2>/dev/null | wc -l || echo 0)

    echo -e "${YELLOW}Files:${NC} ${total_files} total, ${code_files} code, ${doc_files} docs"

    # Project size
    local size=$(du -sh . 2>/dev/null | cut -f1 || echo "unknown")
    echo -e "${YELLOW}Size:${NC} ${size}"

    echo ""
    echo -e "${GREEN}‚úÖ Status check completed${NC}"
}

cmd_docs() {
    local action="${1:-generate}"

    case "$action" in
        generate)
            echo -e "${CYAN}üìö Generating documentation...${NC}"

            mkdir -p docs

            # Generate STATUS.md
            cat > docs/STATUS.md << EOF
# Project Status

**Generated**: $(date '+%Y-%m-%d %H:%M:%S')
**Project**: $(basename "$(pwd)")

## Overview

$(if [[ -f README.md ]]; then head -5 README.md | tail -3; else echo "Project description not available"; fi)

## Git Status

$(if git rev-parse --git-dir >/dev/null 2>&1; then
    echo "- Branch: $(git branch --show-current 2>/dev/null || echo 'unknown')"
    echo "- Commits: $(git log --oneline 2>/dev/null | wc -l || echo 0)"
    echo "- Changes: $(git status --porcelain 2>/dev/null | wc -l || echo 0) files"
else
    echo "- Not a git repository"
fi)

## File Statistics

- Total files: $(find . -type f 2>/dev/null | wc -l || echo 0)
- Code files: $(find . -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.sh" 2>/dev/null | wc -l || echo 0)
- Documentation: $(find . -name "*.md" 2>/dev/null | wc -l || echo 0) files
- Project size: $(du -sh . 2>/dev/null | cut -f1 || echo "unknown")

## Recent Activity

$(if git rev-parse --git-dir >/dev/null 2>&1; then
    echo "### Recent Commits"
    git log --oneline -5 2>/dev/null | sed 's/^/- /' || echo "- No commits found"
else
    echo "### File Modifications"
    find . -type f -mtime -1 2>/dev/null | head -5 | sed 's/^/- /' || echo "- No recent modifications"
fi)

---

*Generated by HelmStack Community Edition v${HELMSTACK_VERSION}*
EOF

            # Generate WORKFLOWS.md
            cat > docs/WORKFLOWS.md << EOF
# Workflows

Available workflows for this project.

## Basic Workflows

### basic-setup
Initialize basic project structure with standard directories and files.

\`\`\`bash
hs workflow run basic-setup
\`\`\`

### git-flow
Set up Git workflow with feature branches and standard Git flow.

\`\`\`bash
hs workflow run git-flow
\`\`\`

### docs
Generate project documentation including status reports and workflow guides.

\`\`\`bash
hs workflow run docs
\`\`\`

### test
Run project tests using detected testing framework.

\`\`\`bash
hs workflow run test
\`\`\`

### build
Build project artifacts using detected build tools.

\`\`\`bash
hs workflow run build
\`\`\`

### cleanup
Clean build artifacts, caches, and temporary files.

\`\`\`bash
hs workflow run cleanup
\`\`\`

## Custom Workflows

Add your own workflows by creating scripts in the \`scripts/\` directory.

---

*Generated by HelmStack Community Edition v${HELMSTACK_VERSION}*
EOF

            echo -e "${GREEN}‚úÖ Documentation generated${NC}"
            echo "  üìÑ docs/STATUS.md"
            echo "  üìÑ docs/WORKFLOWS.md"
            ;;
        *)
            echo -e "${RED}‚ùå Unknown docs action: ${action}${NC}"
            echo "Usage: hs docs [generate]"
            return 1
            ;;
    esac
}

cmd_metrics() {
    echo -e "${CYAN}üìà Project Metrics${NC}"
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"

    # Code metrics
    echo -e "${YELLOW}Code Metrics${NC}"
    local python_files=$(find . -name "*.py" 2>/dev/null | wc -l || echo 0)
    local js_files=$(find . -name "*.js" -o -name "*.ts" 2>/dev/null | wc -l || echo 0)
    local shell_files=$(find . -name "*.sh" 2>/dev/null | wc -l || echo 0)

    echo "  Python files: $python_files"
    echo "  JavaScript/TypeScript files: $js_files"
    echo "  Shell scripts: $shell_files"

    # Documentation metrics
    echo -e "${YELLOW}Documentation${NC}"
    local md_files=$(find . -name "*.md" 2>/dev/null | wc -l || echo 0)
    local readme_exists=$(if [[ -f README.md ]]; then echo "‚úÖ"; else echo "‚ùå"; fi)

    echo "  Markdown files: $md_files"
    echo "  README.md: $readme_exists"

    # Git metrics
    if git rev-parse --git-dir >/dev/null 2>&1; then
        echo -e "${YELLOW}Git Activity${NC}"
        local commits_total=$(git log --oneline 2>/dev/null | wc -l || echo 0)
        local commits_week=$(git log --since="1 week ago" --oneline 2>/dev/null | wc -l || echo 0)
        local contributors=$(git log --format='%an' 2>/dev/null | sort -u | wc -l || echo 0)

        echo "  Total commits: $commits_total"
        echo "  Commits this week: $commits_week"
        echo "  Contributors: $contributors"
    fi

    echo ""
    echo -e "${GREEN}‚úÖ Metrics collected${NC}"
}

cmd_config() {
    echo -e "${CYAN}‚öôÔ∏è  HelmStack Configuration${NC}"
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${YELLOW}Edition:${NC} ${HELMSTACK_EDITION}"
    echo -e "${YELLOW}Version:${NC} ${HELMSTACK_VERSION}"
    echo -e "${YELLOW}Root:${NC} ${HELMSTACK_ROOT}"

    # Check for Pro Edition
    echo ""
    echo -e "${PURPLE}Pro Edition Features${NC}"
    echo "  ü§ñ AI-powered planning and automation"
    echo "  üîó Advanced integrations (GitHub, Slack, JIRA)"
    echo "  üìä Analytics dashboard and insights"
    echo "  üë• Team collaboration features"
    echo "  üõ†Ô∏è Custom addon system"
    echo ""
    echo "Upgrade at: https://helmstack.dev/pro"
}

cmd_version() {
    echo -e "${CYAN}HelmStack Community Edition${NC}"
    echo -e "${BLUE}Version: ${HELMSTACK_VERSION}${NC}"
    echo -e "${BLUE}Edition: ${HELMSTACK_EDITION}${NC}"
    echo ""
    echo "Features in this edition:"
    echo "  ‚úÖ Project templates and initialization"
    echo "  ‚úÖ Basic workflow automation"
    echo "  ‚úÖ Documentation generation"
    echo "  ‚úÖ Status tracking and metrics"
    echo "  ‚úÖ Git integration"
    echo ""
    echo "For advanced features, check out HelmStack Pro:"
    echo "  https://helmstack.dev/pro"
}

# Main command dispatcher
main() {
    local command="${1:-help}"

    case "$command" in
        init)
            shift
            cmd_init "$@"
            ;;
        template)
            shift
            cmd_template "$@"
            ;;
        workflow)
            shift
            cmd_workflow "$@"
            ;;
        status)
            shift
            cmd_status "$@"
            ;;
        docs)
            shift
            cmd_docs "$@"
            ;;
        metrics)
            shift
            cmd_metrics "$@"
            ;;
        config)
            shift
            cmd_config "$@"
            ;;
        version)
            cmd_version
            ;;
        help|--help|-h)
            usage
            ;;
        *)
            echo -e "${RED}‚ùå Unknown command: ${command}${NC}"
            echo ""
            usage
            exit 1
            ;;
    esac
}

# Run main function
main "$@"